#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <ctime>

using namespace std;

struct Book {
    string title;
    string author;
    string ISBN;
    bool available;
};

struct Borrower {
    string name;
    string borrowerID;
};

struct Transaction {
    string ISBN;
    string borrowerID;
    time_t checkoutDate;
    time_t dueDate;
    bool returned;
};

vector<Book> books;
vector<Borrower> borrowers;
vector<Transaction> transactions;
unordered_map<string, double> fines;

void addBook() {
    Book newBook;
    cout << "Enter book title: ";
    cin.ignore();
    getline(cin, newBook.title);
    cout << "Enter book author: ";
    getline(cin, newBook.author);
    cout << "Enter book ISBN: ";
    getline(cin, newBook.ISBN);
    newBook.available = true;
    books.push_back(newBook);
    cout << "Book added successfully." << endl;
}

void addBorrower() {
    Borrower newBorrower;
    cout << "Enter borrower name: ";
    cin.ignore();
    getline(cin, newBorrower.name);
    cout << "Enter borrower ID: ";
    getline(cin, newBorrower.borrowerID);
    borrowers.push_back(newBorrower);
    cout << "Borrower added successfully!" << endl;
}

void searchBook() {
    string query;
    cout << "Enter book title, author, or ISBN to search: ";
    cin.ignore();
    getline(cin, query);

    for (const auto& book : books) {
        if (book.title == query || book.author == query || book.ISBN == query) {
            cout << "Book found: " << book.title << " by " << book.author << " (ISBN: " << book.ISBN << ")" << endl;
            return;
        }
    }
    cout << "Book not found." << endl;
}

void checkoutBook() {
    string borrowerID, ISBN;
    cout << "Enter borrower ID: ";
    cin.ignore();
    getline(cin, borrowerID);
    cout << "Enter book ISBN: ";
    getline(cin, ISBN);

    for (auto& book : books) {
        if (book.ISBN == ISBN && book.available) {
            book.available = false;

            Transaction newTransaction;
            newTransaction.ISBN = ISBN;
            newTransaction.borrowerID = borrowerID;
            newTransaction.checkoutDate = time(0);
            newTransaction.dueDate = newTransaction.checkoutDate + 7 * 24 * 60 * 60; // 1 week due
            newTransaction.returned = false;
            transactions.push_back(newTransaction);

            cout << "Book checked out successfully!" << endl;
            return;
        }
    }
    cout << "Book not available or not found." << endl;
}

void returnBook() {
    string borrowerID, ISBN;
    cout << "Enter borrower ID: ";
    cin.ignore();
    getline(cin, borrowerID);
    cout << "Enter book ISBN: ";
    getline(cin, ISBN);

    for (auto& transaction : transactions) {
        if (transaction.ISBN == ISBN && transaction.borrowerID == borrowerID && !transaction.returned) {
            transaction.returned = true;

            for (auto& book : books) {
                if (book.ISBN == ISBN) {
                    book.available = true;
                    break;
                }
            }

            time_t currentTime = time(0);
            if (currentTime > transaction.dueDate) {
                double fine = difftime(currentTime, transaction.dueDate) / (24 * 60 * 60) * 1.0; // $1 per day
                fines[borrowerID] += fine;
                cout << "Book returned successfully with a fine of $" << fine << endl;
            } else {
                cout << "Book returned successfully!" << endl;
            }
            return;
        }
    }
    cout << "Transaction not found." << endl;
}

void viewFines() {
    for (const auto& fine : fines) {
        cout << "Borrower ID: " << fine.first << ", Fine: $" << fine.second << endl;
    }
}

int main() {
    int choice;
    bool running = true;

    while (running) {
        cout << "\nLibrary Management System\n";
        cout << "1. Add Book\n";
        cout << "2. Add Borrower\n";
        cout << "3. Search Book\n";
        cout << "4. Checkout Book\n";
        cout << "5. Return Book\n";
        cout << "6. View Fines\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addBook();
                break;
            case 2:
                addBorrower();
                break;
            case 3:
                searchBook();
                break;
            case 4:
                checkoutBook();
                break;
            case 5:
                returnBook();
                break;
            case 6:
                viewFines();
                break;
            case 7:
                running = false;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
